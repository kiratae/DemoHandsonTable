/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/hyperformula@0.1.3/es/parser/LexerConfig.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import"core-js/modules/es.regexp.constructor";import"core-js/modules/es.regexp.exec";import"core-js/modules/es.regexp.to-string";import{createToken,Lexer}from"chevrotain";export var AdditionOp=createToken({name:"AdditionOp",pattern:Lexer.NA});export var PlusOp=createToken({name:"PlusOp",pattern:/\+/,categories:AdditionOp});export var MinusOp=createToken({name:"MinusOp",pattern:/-/,categories:AdditionOp});export var MultiplicationOp=createToken({name:"MultiplicationOp",pattern:Lexer.NA});export var TimesOp=createToken({name:"TimesOp",pattern:/\*/,categories:MultiplicationOp});export var DivOp=createToken({name:"DivOp",pattern:/\//,categories:MultiplicationOp});export var PowerOp=createToken({name:"PowerOp",pattern:/\^/});export var PercentOp=createToken({name:"PercentOp",pattern:/%/});export var BooleanOp=createToken({name:"BooleanOp",pattern:Lexer.NA});export var EqualsOp=createToken({name:"EqualsOp",pattern:/=/,categories:BooleanOp});export var NotEqualOp=createToken({name:"NotEqualOp",pattern:/<>/,categories:BooleanOp});export var GreaterThanOp=createToken({name:"GreaterThanOp",pattern:/>/,categories:BooleanOp});export var LessThanOp=createToken({name:"LessThanOp",pattern:/</,categories:BooleanOp});export var GreaterThanOrEqualOp=createToken({name:"GreaterThanOrEqualOp",pattern:/>=/,categories:BooleanOp});export var LessThanOrEqualOp=createToken({name:"LessThanOrEqualOp",pattern:/<=/,categories:BooleanOp});export var ConcatenateOp=createToken({name:"ConcatenateOp",pattern:/&/});export var additionalCharactersAllowedInQuotes=" ";export var sheetNameRegexp="([A-Za-z0-9_À-ʯ]+|'[A-Za-z0-9".concat(additionalCharactersAllowedInQuotes,"_À-ʯ]+')!");export var CellReference=createToken({name:"CellReference",pattern:new RegExp("(".concat(sheetNameRegexp,")?\\$?[A-Za-z]+\\$?[0-9]+"))});export var ColumnRange=createToken({name:"ColumnRange",pattern:new RegExp("(".concat(sheetNameRegexp,")?\\$?[A-Za-z]+:(").concat(sheetNameRegexp,")?\\$?[A-Za-z]+"))});export var RowRange=createToken({name:"RowRange",pattern:new RegExp("(".concat(sheetNameRegexp,")?\\$?[0-9]+:(").concat(sheetNameRegexp,")?\\$?[0-9]+"))});export var RangeSeparator=createToken({name:"RangeSeparator",pattern:/:/});export var LParen=createToken({name:"LParen",pattern:/\(/});export var RParen=createToken({name:"RParen",pattern:/\)/});export var ProcedureName=createToken({name:"ProcedureName",pattern:/(\.?[0-9A-Za-z\u00C0-\u02AF]+)+\(/});export var NamedExpression=createToken({name:"NamedExpression",pattern:/[A-Za-z\u00C0-\u02AF_][0-9\.A-Za-z_\u00C0-\u02AF_]+/});export var StringLiteral=createToken({name:"StringLiteral",pattern:/"([^"\\]*(\\.[^"\\]*)*)"/});export var ErrorLiteral=createToken({name:"ErrorLiteral",pattern:/#[A-Za-z0-9\/]+[?!]?/});export var WhiteSpace=createToken({name:"WhiteSpace",pattern:/[ \t\n\r]+/});export var buildLexerConfig=function(e){var a=e.translationPackage.getFunctionTranslation("OFFSET"),r=e.errorMapping,t=e.translationPackage.buildFunctionMapping(),n=createToken({name:"ArgSeparator",pattern:e.functionArgSeparator}),o=createToken({name:"NumberLiteral",pattern:new RegExp("[\\d]*[".concat(e.decimalSeparator,"]?[\\d]+"))}),p=createToken({name:"OffsetProcedureName",pattern:new RegExp(a,"i")});return{ArgSeparator:n,NumberLiteral:o,OffsetProcedureName:p,allTokens:[WhiteSpace,PlusOp,MinusOp,TimesOp,DivOp,PowerOp,EqualsOp,NotEqualOp,PercentOp,GreaterThanOrEqualOp,LessThanOrEqualOp,GreaterThanOp,LessThanOp,LParen,RParen,p,ProcedureName,RangeSeparator,n,ColumnRange,RowRange,o,StringLiteral,ErrorLiteral,ConcatenateOp,BooleanOp,AdditionOp,MultiplicationOp,CellReference,NamedExpression],errorMapping:r,functionMapping:t,decimalSeparator:e.decimalSeparator,maxColumns:e.maxColumns,maxRows:e.maxRows}};
//# sourceMappingURL=/sm/91025099e08a3accf3785a565be30f19854da884f6209c11f98d325ff34d51fb.map