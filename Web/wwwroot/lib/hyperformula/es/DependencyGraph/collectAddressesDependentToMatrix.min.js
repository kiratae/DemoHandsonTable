/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/hyperformula@0.1.3/es/DependencyGraph/collectAddressesDependentToMatrix.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import"core-js/modules/es.array.filter";import"core-js/modules/es.array.from";import"core-js/modules/es.array.map";import"core-js/modules/es.string.iterator";import{AddressDependency,collectDependencies}from"../parser";import{FormulaCellVertex}from"./FormulaCellVertex";import{MatrixVertex}from"./MatrixVertex";import{RangeVertex}from"./RangeVertex";export var collectAddressesDependentToMatrix=function(e,r,t,n,o){var s,a,i=t.getRange();if(r instanceof RangeVertex){var l=r.range.intersectionWith(i);return null!==l?Array.from(l.addresses(o)):[]}if(r instanceof FormulaCellVertex)s=r.getFormula(n),a=r.getAddress(n);else{if(!(r instanceof MatrixVertex&&r.isFormula()))return[];s=r.getFormula(),a=r.getAddress()}return collectDependencies(s,e).filter(function(e){return e instanceof AddressDependency}).map(function(e){return e.dependency.toSimpleCellAddress(a)}).filter(function(e){return i.addressInRange(e)})};
//# sourceMappingURL=/sm/a7b5c2edf357dea097c98c35fdc9dd47f0d44837324f0cab3d1eac730661ce5f.map