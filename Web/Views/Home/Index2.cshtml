@{
    ViewData["Title"] = "Luckysheet";
}

@section Head {
    <link rel="stylesheet" href="~/lib/luckysheet/plugins/css/pluginsCss.css" />
    <link rel="stylesheet" href="~/lib/luckysheet/plugins/plugins.css" />
    <link rel="stylesheet" href="~/lib/luckysheet/css/luckysheet.css" />
    <link rel="stylesheet" href="~/lib/luckysheet/assets/iconfont/iconfont.css" />
}

<div id="form-app">
    <div class="card">
        <div class="card-body">

            @*<p style="text-align:center;"> <input style="font-size:16px;" type="file" id="Luckyexcel-demo-file" name="Luckyexcel-demo-file" change="demoHandler" /></p>*@

            <h1 class="mb-3">Luckysheet</h1>
            <hr />

            <div id="lsForm" style="width:100%;height: 520px;overflow: hidden;"></div>
        </div>

    </div>
</div>

@section Scripts {
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/luckysheet/plugins/js/plugin.js"></script>
    <script src="~/lib/luckysheet/luckysheet.umd.js"></script>
    <script src="~/lib/dragula/dragula.js"></script>

    @*<script src="~/scripts/app.js"></script>*@

    <script>
        var __MOCK_FORM = {
            formId: 1,
            code: 'A',
            name: 'Form A',
            data: {
                colWidths: [],
                rowHeights: [],
                cells: [],
                mergedCells: []
            },
            variables: [
                {
                    variableId: 1,
                    text: "person",
                    value: 5,
                    dataType: 'text',
                    formula: null,
                    coords: []
                },
                {
                    variableId: 2,
                    text: "summary1",
                    value: 10,
                    dataType: 'numeric',
                    formula: '=!1 + !2 + !3',
                    coords: [],
                },
                {
                    variableId: 3,
                    text: "summaryall",
                    value: 10,
                    dataType: 'numeric',
                    formula: '=SUM(!cash.1, !dep.1.1, ...)',
                    coords: []
                }
            ],
        };
    </script>

    @*<script type="module">
        var LuckyExcel = require('@Url.Content("~/scripts/app.js")');
        window.onload = () => {
            let upload = document.getElementById("Luckyexcel-demo-file");
            upload.addEventListener("change", function (evt) {
                var files = evt.target.files;
                LuckyExcel.transformExcelToLucky(files[0], function (exportJson) {
                    console.log(exportJson);
                });
            });
        }
    </script>*@

    <script>
        var app = new Vue({
            el: '#form-app',
            data: {
                dragEl: null,
                lsRef: null,
                lsFormEl: 'lsForm',
                lsCellDataEl: 'lsCellData',
                lsColumn: 26,
                lsRow: 50,
                data: [{
                    name: "Sheet1",  //Worksheet name
                    index: 0, //Worksheet index
                    status: "1", //Activation status
                    order: "0", //The order of the worksheet
                    config: {},
                    celldata: [],
                }],
                mouseOnCoords: null,
                varibleModal: {
                    variableId: null,
                    text: '',
                    dataType: '',
                    coords: [],
                    formValidates: [],
                    formula: ''
                },
                mdDataTypes: [
                    { value: 'text', text: 'text' },
                    { value: 'numeric', text: 'numeric' },
                    { value: 'date', text: 'date' },
                ],
                currentTab: 'form',
                form: __MOCK_FORM,
            },
            mounted() {
                this.initLuckysheet();
                this.initDragula();
            },
            methods: {
                initLuckysheet(tab = 'form') {
                    let options = {
                        container: (tab == 'form' ? this.lsFormEl : this.lsCellDataEl), //luckysheet is the container id
                        lang: 'en',
                        showinfobar: false, // Whether to display the top name bar
                        showsheetbar: false, // Whether to display the bottom table name area
                        showtoolbar: true, // Whether to display the toolbar in the second row
                        showformulabar: true, // me custom
                        showstatisticBar: false, // Whether to display the bottom count bar
                        fullscreenmode: false, // Whether full-screen mode. In non-full-screen mode, the marker box is not forced to be selected
                        column: this.lsColumn, // The default number of columns in an empty table
                        row: this.lsRow, // The default number of rows in an empty table
                        data: this.data,
                        allowEdit: (tab == 'form'),
                        onCellClick: this.onCellClick,
                        onCellMouseOver: this.onCellMouseOver,
                        onCellMouseOut: this.onCellMouseOut,
                        onSheetMouseOut: this.onSheetMouseOut,
                        toolbars: [
                            'undo',
                            'redo',
                            'paintformat',
                            '----------',
                            'font-size',
                            '----------',
                            'bold',
                            'italic',
                            'strikethrough',
                            'text-color',
                            '----------',
                            'cell-color',
                            'border',
                            'merge',
                            '----------',
                            'align',
                            'valign',
                            'textwrap',
                            'rotation',
                            '----------',
                            'function',
                        ],
                        contextMenus: [
                            'copy',
                            //'copy-as',
                            'paste',
                            'handle=insert|delete|delete-cell',
                            'insert=above&left|below&right|delete-selected|height&width',
                            'ordering=asc|desc',
                            'data=clear',
                        ],
                    }
                    console.log('initLuckysheet', tab, options);
                    if (this.lsRef != null)
                        this.lsRef.destroy();
                    this.lsRef = luckysheet;
                    const self = this;
                    setTimeout(() => {
                        self.lsRef.create(options);
                    }, 5);
                },
                initDragula() {
                    const self = this;
                    this.dragEl = dragula([document.querySelector('#variables')], {
                        moves: function (el, source, handle, sibling) {
                            //console.log($(handle).hasClass('handle'));
                            return $(handle).hasClass('handle'); // don't prevent any drags from initiating by default
                        },
                    })
                        .on('cancel', function (el) {
                            console.log('cancel', el);
                            let text = '!' + $(el).text().trim();
                            if (self.mouseOnCoords && self.lsRef) {
                                let obj = {
                                    m: text,
                                    v: text,
                                    ro: true, // ro stand for readOnly
                                    iv: true, // iv stand for isVariable
                                    //un: 1, // underline
                                    ht: 0, // 0 center, 1 left, 2 right
                                    fc: "#1ea67d",
                                    ff: 0
                                };
                                self.lsRef.setcellvalue(self.mouseOnCoords.row, self.mouseOnCoords.col, self.lsRef.flowdata(), obj);
                                self.lsRef.jfrefreshgrid();
                                self.mouseOnCoords = null;
                            }
                        })
                },
                rerender(tab) {
                    this.currentTab = tab;
                    //if (this.lsRef)
                    //    console.log(this.lsRef.getAllSheets());
                    this.initLuckysheet(this.currentTab);
                },
                onCellClick(row, col, data) {
                    //console.log('onCellClick', row, col, data);
                    if (data && data.iv) {
                        if (data.un) {
                            delete data.un;
                            this.lsRef.jfrefreshgrid();
                        }
                        console.log('isVariable', data);
                        $('#exampleModal').modal('show');
                    }
                },
                onCellMouseOver(row, col, data) {
                    //console.log('onCellMouseOver', row, col, data);
                    if (this.dragEl.dragging) {
                        this.lsRef.setluckysheet_select_save([{ row: [row, row], column: [col, col] }]);
                        this.lsRef.selectHightlightShow();
                        this.mouseOnCoords = { row: row, col: col };
                    } else {
                        this.mouseOnCoords = null;
                    }
                    if (data && data.iv) {
                        data.un = 1;
                        $('#luckysheet-cell-main .luckysheet-cell-sheettable').css('cursor', 'pointer');
                        this.lsRef.jfrefreshgrid();
                    }
                    else {
                        $('#luckysheet-cell-main .luckysheet-cell-sheettable').css('cursor', 'default');
                    }
                },
                onCellMouseOut(row, col, data) {
                    //console.log('onCellMouseOut', row, col, data);
                    this.mouseOnCoords = null;
                    if (data && data.iv && data.un) {
                        delete data.un;
                        this.lsRef.jfrefreshgrid();
                    }
                },
                onSheetMouseOut() {
                    //console.log('onSheetMouseOut');
                    this.mouseOnCoords = null;
                },
            }
        });
    </script>
}
