@{
    ViewData["Title"] = "luckysheet";
}

<div id="app">
    <h1 class="mt-3">Luckysheet</h1>

    <hr />

    <div class="row">
        <div class="col-9">
            <div class="card">
                <div class="card-body">

                    <div id="luckysheet" style="width:100%;height:420px;overflow: hidden;"></div>

                </div>
            </div>

        </div>
        <div class="col-3">
            <div class="card h-100">
                <div class="card-header">
                    <span class="card-title">จัดการสูตรคำนวน</span>
                </div>
                <div class="card-body">
                    <div class="list-group" id="variables">
                        <div class="list-group-item px-3 py-2" v-for="item in form.variables" :data-variable-id="item.variableId">
                            <button class="btn p-0 handle mr-1 fa fa-arrows-alt text-black-50" type="button"></button>
                            <span>{{ item.text }} </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ชื่อตัวแปร</label>
                        <input type="text" v-model="varibleModal.text" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>ประเภทข้อมูล</label>
                        <select class="form-control" v-model="varibleModal.dataType">
                            <option :value="dataType.value" v-for="dataType in mdDataTypes">{{ dataType.text }}</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>เลือกเซลแสดงผล</label>
                        <div class="form-control">
                            <span v-for="crood in varibleModal.coords" class="badge badge-secondary mx-1">{{ crood.cell }}</span>
                        </div>
                    </div>
                    <hr />
                    <div class="form-group">
                        <label>ตรวจสอบข้อมูล</label>
                        <div class="row">
                            <div class="col-12">
                                <div class="row">
                                    <div class="col-6">
                                        <select class="form-control">
                                            <option value="value">text</option>
                                        </select>
                                    </div>
                                    <div class="col-6">
                                        <select class="form-control">
                                            <option value="value">text</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <button class="btn"><i class="fa fa-plus-circle"></i>&ensp;เพิ่มข้อมูล</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>สูตรการคำนวน</label>
                        <textarea v-model="varibleModal.formula" class="form-control"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" v-on:click="doSaveVariable(varibleModal.variableId)">Save</button>
                </div>
            </div>
        </div>
    </div>

</div>

@section Head {
    <link rel="stylesheet" href="~/lib/luckysheet/plugins/css/pluginsCss.css" />
    <link rel="stylesheet" href="~/lib/luckysheet/plugins/plugins.css" />
    <link rel="stylesheet" href="~/lib/luckysheet/css/luckysheet.css" />
}

@section Scripts {
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/luckysheet/plugins/js/plugin.js"></script>
    <script src="~/lib/luckysheet/luckysheet.umd.js"></script>
    <script src="~/lib/dragula/dragula.js"></script>

    <script>
        var __MOCK_FORM = {
            formId: 1,
            code: 'A',
            name: 'Form A',
            data: {
                colWidths: [],
                rowHeights: [],
                cells: [],
                mergedCells: []
            },
            variables: [
                {
                    variableId: 1,
                    text: "person",
                    value: 5,
                    dataType: 'text',
                    formula: null,
                    coords: []
                },
                {
                    variableId: 2,
                    text: "summary1",
                    value: 10,
                    dataType: 'numeric',
                    formula: '=!1 + !2 + !3',
                    coords: [],
                },
                {
                    variableId: 3,
                    text: "summaryall",
                    value: 10,
                    dataType: 'numeric',
                    formula: '=SUM(!cash.1, !dep.1.1, ...)',
                    coords: []
                }
            ],
        };
    </script>

    <script>
        var app = new Vue({
            el: '#app',
            data: {
                dragEl: null,
                luckysheetRef: null,
                luckysheetElId: 'luckysheet',
                luckysheetColumn: 26,
                luckysheetRow: 50,
                data: [{
                    name: "Sheet1",  //Worksheet name
                    index: 0, //Worksheet index
                    status: "1", //Activation status
                    order: "0", //The order of the worksheet
                    config: {},
                    celldata: [],
                }],
                mouseOnCoords: null,
                varibleModal: {
                    variableId: null,
                    text: '',
                    dataType: '',
                    coords: [],
                    formValidates: [],
                    formula: ''
                },
                mdDataTypes: [
                    { value: 'text', text: 'text' },
                    { value: 'numeric', text: 'numeric' },
                    { value: 'date', text: 'date' },
                ],
                form: __MOCK_FORM,
            },
            mounted() {
                this.initLuckysheet();
                this.initDragula();
            },
            methods: {
                initLuckysheet() {
                    let options = {
                        container: this.luckysheetElId, //luckysheet is the container id
                        lang: 'en',
                        showinfobar: false, // Whether to display the top name bar
                        showsheetbar: true, // Whether to display the bottom table name area
                        showtoolbar: true, // Whether to display the toolbar in the second row
                        showformulabar: true, // me custom
                        showstatisticBar: true, // Whether to display the bottom count bar
                        fullscreenmode: false, // Whether full-screen mode. In non-full-screen mode, the marker box is not forced to be selected
                        column: this.luckysheetColumn, // The default number of columns in an empty table
                        row: this.luckysheetRow, // The default number of rows in an empty table
                        data: this.data,
                        onCellClick: this.onCellClick,
                        onCellMouseOver: this.onCellMouseOver,
                        onCellMouseOut: this.onCellMouseOut,
                        onSheetMouseOut: this.onSheetMouseOut
                    }
                    this.luckysheetRef = luckysheet;
                    this.luckysheetRef.create(options);
                },
                initDragula() {
                    const self = this;
                    this.dragEl = dragula([document.querySelector('#variables')], {
                        moves: function (el, source, handle, sibling) {
                            //console.log($(handle).hasClass('handle'));
                            return $(handle).hasClass('handle'); // don't prevent any drags from initiating by default
                        },
                    })
                        .on('cancel', function (el) {
                            console.log('cancel', el);
                            let text = '!' + $(el).text().trim();

                            if (self.mouseOnCoords && self.luckysheetRef) {
                                luckysheet.setcellvalue(self.mouseOnCoords.row, self.mouseOnCoords.col, luckysheet.flowdata(), { m: text, v: text, isVariable: true });
                                luckysheet.jfrefreshgrid();
                                self.mouseOnCoords = null;
                            }
                        })
                },
                onCellClick(row, col, data) {
                    //console.log('onCellClick', row, col, data);
                    if (data && data.isVariable) {
                        console.log('isVariable');
                    }
                },
                onCellMouseOver(row, col, data) {
                    //console.log('onCellMouseOver', row, col, data);
                    if (this.dragEl.dragging) {
                        this.luckysheetRef.setluckysheet_select_save([{ row: [row, row], column: [col, col] }]);
                        this.luckysheetRef.selectHightlightShow();
                        this.mouseOnCoords = { row: row, col: col };
                    } else {
                        this.mouseOnCoords = null;
                    }
                },
                onCellMouseOut(row, col, data) {
                    //console.log('onCellMouseOut', row, col, data);
                    this.mouseOnCoords = null;
                },
                onSheetMouseOut() {
                    //console.log('onSheetMouseOut');
                    this.mouseOnCoords = null;
                }
            }
        });
    </script>
}