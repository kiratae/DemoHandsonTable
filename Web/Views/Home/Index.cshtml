@{
    ViewData["Title"] = "Demo2";
}
<div id="app">
    <h1>{{ message }}</h1>

    <hr />

    <div class="row mb-3 justify-content-end">
        <div class="col-auto">
            <button class="btn btn-outline-primary" type="button" data-toggle="modal" data-target="#formListModal"><i class="fa fa-list"></i>&ensp;Form list</button>
        </div>
    </div>

    <div class="row">
        <div class="col-9">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="form-tab" data-toggle="tab" href="#form" role="tab" aria-controls="form" aria-selected="true" v-on:click="rerender('form')">จัดการแบบฟอร์ม</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="cell-data-tab" data-toggle="tab" href="#cell-data" role="tab" aria-controls="cell-data" aria-selected="false" v-on:click="rerender('cell-data')">จัดการข้อมูลตาราง</a>
                </li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane active" id="form" role="tabpanel" aria-labelledby="form-tab">

                    <div class="card">
                        <div class="card-body">

                            <div class="hot handsontable htRowHeaders htColumnHeaders" style="height: 420px; overflow: hidden; width: 100%;" data-originalstyle="height: 420px; overflow: hidden; width: 100%;">
                                <hot-table ref="formWrapper" :settings="hotFormSettings"></hot-table>
                            </div>

                        </div>
                    </div>

                </div>
                <div class="tab-pane" id="cell-data" role="tabpanel" aria-labelledby="cell-data-tab">

                    <div class="card">
                        <div class="card-body">
                            <div class="hot handsontable htRowHeaders htColumnHeaders" id="cellDataSheet" style="height: 420px; overflow: hidden; width: 100%;" data-originalstyle="height: 420px; overflow: hidden; width: 100%;">
                                <hot-table ref="cellDataWrapper" :settings="hotCellDataSettings"></hot-table>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card h-100" v-bind:class="{ 'd-none' : isFormTab }">
                <div class="card-header">
                    <span class="card-title">จัดการสูตรคำนวน</span>
                </div>
                <div class="card-body">
                    <div class="list-group" id="variables">
                        <div class="list-group-item px-3 py-2" v-for="item in variables" :data-variable-id="item.variableId">
                            <button class="btn p-0 handle mr-1 fa fa-arrows-alt text-black-50" type="button"></button>
                            <span>{{ item.text }} </span>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary" type="button" v-on:click="test">test</button>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-center mt-3" v-if="db">
        <button class="btn btn-primary btn-block" type="button" v-on:click="doSaveForm">Save</button>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ชื่อตัวแปร</label>
                        <input type="text" v-model="varibleModal.text" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>ประเภทข้อมูล</label>
                        <select class="form-control" v-model="varibleModal.dataType">
                            <option :value="dataType.value" v-for="dataType in mdDataTypes">{{ dataType.text }}</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>เลือกเซลแสดงผล</label>
                        <div class="form-control">
                            <span v-for="crood in varibleModal.coords" class="badge badge-secondary mx-1">{{ crood.cell }}</span>
                        </div>
                    </div>
                    <hr />
                    <div class="form-group">
                        <label>ตรวจสอบข้อมูล</label>
                        <div class="row">
                            <div class="col-12">
                                <div class="row">
                                    <div class="col-6">
                                        <select class="form-control">
                                            <option value="value">text</option>
                                        </select>
                                    </div>
                                    <div class="col-6">
                                        <select class="form-control">
                                            <option value="value">text</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <button class="btn"><i class="fa fa-plus-circle"></i>&ensp;เพิ่มข้อมูล</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>สูตรการคำนวน</label>
                        <textarea v-model="varibleModal.formula" class="form-control"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Form List Modal -->
    <div class="modal fade" id="formListModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Form list title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th scope="col" class="text-center">#</th>
                                    <th scope="col" class="text-center">Code</th>
                                    <th scope="col" class="text-center">Name</th>
                                    <th scope="col" class="text-center">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-if="forms.length == 0">
                                    <td colspan="4" class="text-center">-- No data --</td>
                                </tr>
                                <tr v-else v-for="(form, index) in forms">
                                    <th scope="row">{{ index }}</th>
                                    <td>{{ form.code }}</td>
                                    <td>{{ form.name }}</td>
                                    <td><a href="#">load this form</a></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Head {
    <link rel="stylesheet" href="~/lib/handsontable/handsontable.full.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css" />

    <style>
        .is-readOnly {
            border: 1px solid red;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/jquery/jquery.js"></script>
    <script src="~/lib/handsontable/handsontable.full.js"></script>
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/handsontable/vue/dist/vue-handsontable.js"></script>
    <script src="~/lib/dragula/dragula.js"></script>
    @*<script src="~/lib/formula-parser/formula-parser.js"></script>*@
    <script src="~/lib/formula-parser-sheet-name/formula-parser.js"></script>
    <script src='~/lib/sql.js/dist/sql-wasm.js'></script>

    <script>
        // make customRenderer to display variable in table
        var customRenderer = function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            if (value != null && value != '') {
                if (cellProperties.variable)
                    $(td).html('<a class="btn btn-link p-0 var-btn" href="#" role="button" data-x-id="' + cellProperties.variable.variableId + '" data-toggle="modal" data-target="#exampleModal">' + cellProperties.variable.text + '</a>');
            }
            if (cellProperties.isTemplate) {
                $(td).css('background-color', '#f8f8f8');
            }
        };

        var customFormRenderer = function (instance, td, row, col, prop, value, cellProperties) {
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            if (value && value[0] == '!') {
                $(td).html('');
            }
        };

        // on click variable open modal and add variable data to modal to edit
        $(document).on('click', '.var-btn', function (e) {
            let variable = app.getVariableById(parseInt($(this).data('x-id')));
            console.log(variable);
            console.log(variable.coords);
            app.varibleModal.text = variable.text;
            app.varibleModal.dataType = variable.dataType;
            app.varibleModal.coords = variable.coords;
            app.varibleModal.formula = variable.formula;
        });

        class Cell {
            constructor(options) {
                if (typeof options.row === 'undefined' || typeof options.col === 'undefined') {
                    console.error('class Cell row or col is missing!');
                    return;
                }
                this.row = options.row;
                this.col = options.col;

                this.value = options.value || null;

                if (options.className)
                    this.className = options.className;
                if (options.isTemplate)
                    this.isTemplate = options.isTemplate;
                if (options.variable)
                    this.variable = options.variable;
            }

            setTemplate() {
                this.isTemplate = true;
            }
        }

        function toBinArray(str) {
            var l = str.length,
                arr = new Uint8Array(l);
            for (var i = 0; i < l; i++) arr[i] = str.charCodeAt(i);
            return arr;
        }

        function toBinString(arr) {
            var uarr = new Uint8Array(arr);
            var strings = [], chunksize = 0xffff;
            // There is a maximum stack size. We cannot call String.fromCharCode with as many arguments as we want
            for (var i = 0; i * chunksize < uarr.length; i++) {
                strings.push(String.fromCharCode.apply(null, uarr.subarray(i * chunksize, (i + 1) * chunksize)));
            }
            return strings.join('');
        }
    </script>

    <script>
        var __MOCK_FORM = {
            formA: {
                formId: 1,
                code: 'A',
                name: 'Form A',
                data: {
                    colWidths: [],
                    rowHeights: [],
                    cells: [],
                    mergedCells: []
                },
                variables: [
                    {
                        variableId: 1,
                        text: "person",
                        value: 5,
                        dataType: 'text',
                        formula: null,
                        coords: []
                    },
                    {
                        variableId: 2,
                        text: "summary1",
                        value: 10,
                        dataType: 'numeric',
                        formula: '=!1 + !2 + !3',
                        coords: [],
                    },
                    {
                        variableId: 3,
                        text: "summaryall",
                        value: 10,
                        dataType: 'numeric',
                        formula: '=SUM(!cash.1, !dep.1.1, ...)',
                        coords: []
                    }
                ],
            },
            formB: {
                formId: 2,
                code: 'A',
                name: 'Form A',
                data: {
                    colWidths: [],
                    rowHeights: [],
                    cells: [],
                    mergedCells: []
                },
                variables: [
                    {
                        variableId: 1,
                        text: "cooperative",
                        value: 5,
                        dataType: 'text',
                        formula: null,
                        coords: []
                    },
                ],
            },
        }

    </script>

    <script>
        var app = new Vue({
            el: '#app',
            data: {
                message: 'Hansontable! Demo1',
                hotFormRef: null,
                hotCellDataRef: null,
                hotFormSettings: {
                    startRows: 3, // 30
                    startCols: 3, // 26
                    rowHeaders: true,
                    colHeaders: true,
                    contextMenu: true,
                    mergeCells: true,
                    width: '100%',
                    height: 420,
                    outsideClickDeselects: true,
                    manualColumnResize: true,
                    manualRowResize: true,
                    //manualColumnMove: true,
                    //manualRowMove: true,
                    autoRowSize: true,
                    //stretchH: 'all',
                    contextMenu: {
                        items: {
                            'cut': {
                                name: 'Cut'
                            },
                            'copy': {
                                name: 'Copy'
                            },
                            'separator_0': Handsontable.plugins.ContextMenu.SEPARATOR,
                            'row_above': {
                                name: 'Insert row'
                            },
                            'col_left': {
                                name: 'Insert column'
                            },
                            'separator_1': Handsontable.plugins.ContextMenu.SEPARATOR,
                            'remove_row': {
                                name: 'Delete row'
                            },
                            'remove_col': {
                                name: 'Delete column'
                            },
                            'separator_2': Handsontable.plugins.ContextMenu.SEPARATOR,
                            'alignment': {
                                name: 'Alignment'
                            },
                            'separator_3': Handsontable.plugins.ContextMenu.SEPARATOR,
                            'mergeCells': {
                                name: 'Merge/Unmerge cells'
                            },
                        }
                    },
                    renderer: customFormRenderer,
                    licenseKey: 'non-commercial-and-evaluation'
                },
                hotCellDataSettings: {
                    data: [],
                    rowHeaders: true,
                    colHeaders: true,
                    mergeCells: true,
                    width: '100%',
                    height: 420,
                    readOnly: true,
                    disableVisualSelection: true,
                    autoRowSize: true,
                    //stretchH: 'all',
                    renderer: customRenderer,
                    licenseKey: 'non-commercial-and-evaluation'
                },
                isFormTab: true,
                dragEl: null,
                variables: [
                    {
                        variableId: 1,
                        text: "person",
                        value: 5,
                        dataType: 'text',
                        formula: null,
                        coords: []
                    },
                    {
                        variableId: 4,
                        text: "summary1",
                        value: 10,
                        dataType: 'numeric',
                        formula: '=!1 + !2 + !3',
                        coords: [],
                    },
                    {
                        variableId: 5,
                        text: "summaryall",
                        value: 10,
                        dataType: 'numeric',
                        formula: '=SUM(!cash.1, !dep.1.1, ...)',
                        coords: []
                    }
                ],
                cellDataTab: {
                    mouseOnCoords: null
                },
                cellMergeData: [],
                varibleModal: {
                    text: '',
                    dataType: '',
                    coords: [],
                    formValidates: [],
                    formula: ''
                },
                mdDataTypes: [
                    { value: 'text', text: 'text' },
                    { value: 'numeric', text: 'numeric' },
                    { value: 'date', text: 'date' },
                ],
                // ----------- Form Tempalte -------------------
                form: __MOCK_FORM.formA,
                forms: [],
                // ----------- db -------------------
                db: null
            },
            mounted() {
                const self = this;
                this.initHotForm();
                this.initHotCellData();
                this.initDragula();
                this.initDB(
                    () => {
                        self.initForm();
                    },
                    () => {
                        self.deserializeModel(self.getData());
                        self.updateHot(self.hotFormRef, self.form);
                    }
                );
                this.message = this.form.name;
            },
            methods: {
                cloneObj(obj) {
                    return Object.assign({}, obj);
                },
                initHotForm() {
                    this.hotFormRef = this.$refs.formWrapper.hotInstance;

                    Handsontable.hooks.add('afterMergeCells', this.afterMergeCells, this.hotFormRef);
                    Handsontable.hooks.add('afterColumnResize', this.afterColumnResize, this.hotFormRef);
                    Handsontable.hooks.add('afterRowResize', this.afterRowResize, this.hotFormRef);
                    Handsontable.hooks.add('afterCreateCol', this.afterCreateCol, this.hotFormRef);
                    Handsontable.hooks.add('afterCreateRow', this.afterCreateRow, this.hotFormRef);
                },
                initHotCellData() {
                    this.hotCellDataRef = this.$refs.cellDataWrapper.hotInstance;

                    Handsontable.hooks.add('afterOnCellMouseOver', this.afterOnCellMouseOver, this.hotCellDataRef);
                    Handsontable.hooks.add('afterOnCellMouseOut', this.afterOnCellMouseOut, this.hotCellDataRef);
                },
                initDragula() {
                    const self = this;
                    this.dragEl = dragula([document.querySelector('#variables')], {
                        moves: function (el, source, handle, sibling) {
                            //console.log($(handle).hasClass('handle'));
                            return $(handle).hasClass('handle'); // don't prevent any drags from initiating by default
                        },
                    })
                        .on('cancel', function (el) {
                            console.log('cancel', el);

                            if (self.cellDataTab.mouseOnCoords != null && self.hotCellDataRef != null) {
                                let isTemplate = self.hotCellDataRef.getCellMeta(self.cellDataTab.mouseOnCoords.row, self.cellDataTab.mouseOnCoords.col).isTemplate;
                                if (!isTemplate) {
                                    let variable = self.getVariableById($(el).data('variable-id'));
                                    let text = '!' + $(el).text().trim();
                                    variable.coords.push({
                                        row: self.cellDataTab.mouseOnCoords.row,
                                        col: self.cellDataTab.mouseOnCoords.col,
                                        cell: self.getCellLetter(self.cellDataTab.mouseOnCoords.row, self.cellDataTab.mouseOnCoords.col)
                                    });
                                    if (variable.coords.length > 1) {
                                        variable.coords.sort(function (a, b) {
                                            if (a.cell < b.cell) {
                                                return -1;
                                            }
                                            if (a.cell > b.cell) {
                                                return 1;
                                            }
                                            return 0;
                                        })
                                    }
                                    self.hotCellDataRef.setDataAtCell(self.cellDataTab.mouseOnCoords.row, self.cellDataTab.mouseOnCoords.col, text, 'user drag from dragula');
                                    self.hotCellDataRef.setCellMetaObject(self.cellDataTab.mouseOnCoords.row, self.cellDataTab.mouseOnCoords.col, { variable: variable });
                                    self.hotCellDataRef.render();
                                }
                                self.cellDataTab.mouseOnCoords = null;
                            }
                        })
                },
                initDB(initCallback, updateCallback) {
                    const self = this;

                    config = {
                        locateFile: filename => `/lib/sql.js/dist/${filename}`
                    }
                    initSqlJs(config).then(function (SQL) {
                        var dbstr = window.localStorage.getItem("form.sqlite");
                        if (dbstr) {
                            self.db = new SQL.Database(toBinArray(dbstr));

                            if (updateCallback)
                                updateCallback();
                        } else {
                            self.db = new SQL.Database();
                            self.db.run("CREATE TABLE form (formId INTEGER PRIMARY KEY, code, name, data);");

                            if (initCallback)
                                initCallback();
                        }
                    });
                },
                initForm() {
                    // init cells
                    this.form.data.cells.splice(0, this.form.data.cells.length);
                    for (let cell of this.hotFormRef.getCellsMeta()) {
                        this.form.data.cells.push(new Cell({ row: cell.row, col: cell.col }));
                    }
                    this.form.data.cells = this.sortCells(this.form.data.cells);
                    // init colWiths
                    this.form.data.colWidths.splice(0, this.form.data.colWidths.length);
                    for (let i = 0; i < this.hotFormRef.countVisibleCols(); i++) {
                        this.form.data.colWidths.push(this.hotFormRef.getColWidth(i));
                    }
                    // init rowHeights
                    this.form.data.rowHeights.splice(0, this.form.data.rowHeights.length);
                    for (let i = 0; i < this.hotFormRef.countVisibleRows(); i++) {
                        this.form.data.rowHeights.push(this.hotFormRef.getRowHeight(i));
                    }
                    console.log('initForm', this.form);
                    this.db.run("INSERT INTO form VALUES (?,?,?,?)", [this.form.formId, this.form.code, this.form.name, this.serializeModel()]);
                    //console.log(this.getModelList());
                },
                updateHot: function (hotRef, form) {
                    // set data from form sheet
                    hotRef.loadData(this.getDatasFromCells(form.data.cells));

                    // set column width from form sheet
                    hotRef.updateSettings({
                        colWidths: form.data.colWidths,
                        rowHeights: form.data.rowHeights,
                    });

                    // set class from form sheet
                    for (let cell of form.data.cells) {
                        hotRef.setCellMetaObject(cell.row, cell.col, cell);
                    }

                    // set merge cell from form sheet
                    for (let cell of form.data.mergedCells) {
                        hotRef.getPlugin('MergeCells').merge(cell.from.row, cell.from.col, cell.to.row, cell.to.col);
                    }

                    setTimeout(function () {
                        hotRef.render();
                        setTimeout(function () {
                            hotRef.render();
                            console.log('updateHot');
                        }, 5);
                    }, 5);
                },
                updateModel: function (hotRef) {
                    // set cells
                    for (let cell of this.form.data.cells) {
                        if (!this.stringIsNullOrEmpty(hotRef.getDataAtCell(cell.row, cell.col))) {
                            cell.value = hotRef.getDataAtCell(cell.row, cell.col);
                        }
                        if (!this.stringIsNullOrEmpty(cell.value)) {
                            if (!this.isVariable(cell.value)) {
                                cell.setTemplate();
                            }
                        }
                        let cellMeta = hotRef.getCellMeta(cell.row, cell.col);
                        if (typeof cellMeta.variable !== 'undefined') {
                            cell.variable = cellMeta.variable;
                        }
                        if (typeof cellMeta.className !== 'undefined') {
                            cell.className = cellMeta.className;
                        }
                    }

                    console.log('updateModel', this.form);
                },
                rerender: function (type) {
                    console.log('rerender to -> ' + type);
                    if (type == 'form') {
                        this.isFormTab = true;

                        this.updateModel(this.hotCellDataRef);
                        this.updateHot(this.hotFormRef, this.form);
                    } else if (type == 'cell-data') {
                        this.isFormTab = false;

                        this.updateModel(this.hotFormRef);
                        this.updateHot(this.hotCellDataRef, this.form, false);
                    }
                },
                afterOnCellMouseOver(event, coords, TD) {
                    if (coords.row != -1 && coords.col != -1 && this.dragEl.dragging) {
                        let isTemplate = this.hotCellDataRef.getCellMeta(coords.row, coords.col).isTemplate;
                        if (!isTemplate) {
                            if (!$(TD).hasClass('bg-warning')) {
                                $(TD).addClass('bg-warning');
                                this.cellDataTab.mouseOnCoords = coords;
                            }
                        } else {
                            this.cellDataTab.mouseOnCoords = null;
                            $(TD).removeClass('bg-warning');
                        }
                        //console.log('beforeOnCellMouseOver', this.cellDataTab.mouseOnCoords);
                    } else {
                        this.cellDataTab.mouseOnCoords = null;
                        $(TD).removeClass('bg-warning');
                    }
                },
                afterOnCellMouseOut(event, coords, TD) {
                    this.cellDataTab.mouseOnCoords = null;
                    $(TD).removeClass('bg-warning');
                },
                afterColumnResize(newSize, column, isDoubleClick) {
                    console.log('afterColumnResize', newSize, column, isDoubleClick);
                    this.form.data.colWidths[column] = newSize;
                },
                afterRowResize(newSize, row, isDoubleClick) {
                    this.form.data.rowHeights[row] = newSize;
                },
                afterCreateCol(index, amount, source) {
                    this.hotFormRef.render();
                    console.log('afterCreateCol', index, amount, source);
                    // init cells
                    this.form.data.cells.splice(0, this.form.data.cells.length);
                    for (let cell of this.hotFormRef.getCellsMeta()) {
                        this.model.cells.push(new Cell({ row: cell.row, col: cell.col }));
                    }
                    this.form.data.cells = this.sortCells(this.model.cells);
                    // init colWiths
                    this.form.data.colWidths.splice(0, this.form.data.colWidths.length);
                    for (let i = 0; i < this.hotFormRef.countVisibleCols(); i++) {
                        this.form.data.colWidths.push(this.hotFormRef.getColWidth(i));
                    }
                },
                afterCreateRow(index, amount, source) {
                    this.hotFormRef.render();
                    console.log('afterCreateRow', index, amount, source);
                    // init cells
                    this.form.data.cells.splice(0, this.form.data.cells.length);
                    for (let cell of this.hotFormRef.getCellsMeta()) {
                        this.form.data.cells.push(new Cell({ row: cell.row, col: cell.col }));
                    }
                    this.form.data.cells = this.sortCells(this.model.cells);
                    // init rowHeights
                    this.model.rowHeights.splice(0, this.form.data.rowHeights.length);
                    for (let i = 0; i < this.hotFormRef.countVisibleRows(); i++) {
                        this.form.data.rowHeights.push(this.hotFormRef.getRowHeight(i));
                    }
                },
                getVariableById(variableId) {
                    return this.form.variables[this.form.variables.findIndex(item => item.variableId == variableId)];
                },
                test() {
                    console.log(this.hotCellDataRef.getSourceData());
                    console.log(this.hotCellDataRef.getCellsMeta());
                },
                afterMergeCells(cellRange, mergeParent, auto) {
                    console.log('afterMergeCells', cellRange, mergeParent, auto);
                    if (!this.form.data.mergedCells.includes(cellRange))
                        this.form.data.mergedCells.push(cellRange);
                },
                stringIsNullOrEmpty(str) {
                    return str === null || str === '' || typeof str === 'undefined';
                },
                isVariable(str) {
                    return str[0] == '!';
                },
                getCellDataSet(rowCount, colCount, arr) {
                    let list = [];
                    for (let r = 0; r < rowCount; r++) {
                        for (let c = 0; c < colCount; c++) {
                            list.push([r, c, arr[r][c]]);
                        }
                    }
                    return list;
                },
                getCellLetter(row, col) {
                    return ((65 + col) > 90 ? String.fromCharCode(65 + col / 65) + String.fromCharCode(65 + col - 26) : String.fromCharCode(65 + col)) + row;
                },
                getDatasFromCells(cells) {
                    let datas = [], rowTemp = -1;
                    for (let cell of cells) {
                        if (rowTemp != cell.row) {
                            rowTemp = cell.row;
                            datas.push([]);
                            datas[cell.row].push(cell.value);
                        } else {
                            datas[cell.row].push(cell.value);
                        }
                    }
                    return datas;
                },
                sortCells(cells) {
                    return cells
                        .sort(function (a, b) {
                            if (a.row < b.row) {
                                return -1;
                            }
                            if (a.row > b.row) {
                                return 1;
                            }
                            return 0;
                        });
                },
                saveForm() {
                    this.db.run("UPDATE form SET code = ?, name = ?, data = ? WHERE formId = ?", ['A', 'Form A', this.serializeModel(), this.form.formId]);
                    var dbstr = toBinString(this.db.export());
                    window.localStorage.setItem("form.sqlite", dbstr);
                    console.log(this.getList());
                    alert('Save Model Success!');
                },
                getData() {
                    let stmt = this.db.prepare("SELECT * FROM form WHERE formId = $formId");
                    stmt.bind({ $formId: this.form.formId });
                    stmt.step();
                    return stmt.getAsObject();
                },
                getList() {
                    let stmt = this.db.prepare("SELECT * FROM form");
                    let list = [];
                    while (stmt.step()) {
                        list.push(stmt.getAsObject());
                    }
                    return list;
                },
                serializeModel() {
                    let data = this.cloneObj(this.form.data);
                    console.log('serializeModel', data);
                    return JSON.stringify(data);
                },
                deserializeModel(form) {
                    console.log('beforeDeserializeModel', form)
                    this.form.data = JSON.parse(form.data);

                    let list = [];
                    for (let cell of this.form.data.cells) {
                        list.push(new Cell(cell));
                    }
                    this.form.data.cells = list;
                    console.log('afterDeserializeModel', this.form);
                },
                doSaveForm() {
                    if (this.isFormTab)
                        this.updateModel(this.hotFormRef);
                    else
                        this.updateModel(this.hotCellDataRef);
                    this.saveForm();
                },
                refresh() {
                    this.forms = this.getList();
                }
            },
            components: {
                HotTable: Handsontable.vue.HotTable
            },
        })
    </script>
}