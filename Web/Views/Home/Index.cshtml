@{
    ViewData["Title"] = "Hansontable Demo";
}

<div id="app">
    <h1>{{ message }}</h1>
    <hr />

    <div class="form-row mb-3">
        <label class="col-form-label col-auto">fx</label>
        <div class="col">
            <input type="text" v-model="inputFormula" class="form-control" v-on:keyup.enter="inputFormulaEnter" />
        </div>
    </div>
    @*<ul class="nav nav-tabs border-bottom-0" id="myTab">
            <li class="nav-item">
                <a class="nav-link" v-bind:class="{ active : isFormTab }" href="javascript:void(0)" v-on:click="changeTab('form')">Form</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" v-bind:class="{ active : !isFormTab }" href="javascript:void(0)" v-on:click="changeTab('cell-data')">Cell Data</a>
            </li>
        </ul>*@
    <div class="tab-content">
        <div class="tab-pane fade show active" role="tabpanel">
            <div class="card">
                <div class="card-body">

                    <div class="row">
                        <div v-bind:class="isFormTab ? 'col-12' : 'col-10'">
                            <div class="hot handsontable htRowHeaders htColumnHeaders" style="height: 420px; overflow: hidden; width: 100%;">
                                <hot-table ref="wrapper" :settings="hotSettings">
                                    @*<hot-column v-for="n in 15" v-bind:key="'col' + n">
                                            <custom-renderer hot-renderer></custom-renderer>
                                            <custom-editor hot-editor></custom-editor>
                                        </hot-column>*@
                                </hot-table>
                            </div>
                        </div>
                        <div v-bind:class="isFormTab ? 'd-none' : 'col-2'">
                            <div class="card h-100">
                                <div class="card-body">
                                    <ul class="list-group" id="variables">
                                        <li class="list-group-item" v-for="item in variables">{{ item.tag }}</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-primary btn-block mt-3" type="button" v-on:click="getDatas">getDatas to console log</button>

    <div class="modal fade" :class="{ 'show' : showModal }" v-bind:style="'display: ' + (showModal ? 'block' : 'none')" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data validation</h5>
                    <button type="button" class="close" aria-label="Close" v-on:click="showModal = false">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group form-row">
                        <label class="col-form-label col-sm-4">Cell range</label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control" v-model="cellRange" />
                        </div>
                    </div>
                    <div class="form-group form-row">
                        <label class="col-form-label col-sm-4">Criteria</label>
                        <div class="col-sm-8">
                            <select class="form-control" v-model="cellCriteriaValue">
                                <option :value="criteria.value" v-for="criteria in cellCriterias">{{criteria.text}}</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" v-on:click="showModal = false">Close</button>
                    <button type="button" class="btn btn-outline-primary" v-on:click="removeCellType">Remove validation</button>
                    <button type="button" class="btn btn-primary" v-on:click="setCellType">Save</button>
                </div>
            </div>
        </div>
    </div>

</div>

@section Head {
    <link rel="stylesheet" href="~/lib/handsontable/handsontable.full.css" />
    <link rel="stylesheet" href="~/lib/dragula/dragula.css" />

    <style>
        .flex-contianer {
            list-style: none;
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
        }

            .flex-contianer > li {
                margin: 0 5px;
                padding: 5px;
                cursor: pointer;
            }

                .flex-contianer > li:hover {
                    color: red;
                    text-decoration: underline;
                }
    </style>
}

@section Scripts {
    <script src="~/lib/jquery/jquery.js"></script>
    <script src="~/lib/handsontable/handsontable.full.js"></script>
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/handsontable/vue/dist/vue-handsontable.js"></script>
    <script src="~/lib/dragula/dragula.js"></script>
    <script src="~/lib/formula-parser/formula-parser.js"></script>

    <script>
    </script>

    <script type="text/x-template" id="editor-template">
        <div v-if="isVisible" id="editorElement">
            <input class="form-control" v-model="value" />
        </div>
    </script>

    <script>
        //const CustomEditor = {
        //    name: 'CustomEditor',
        //    template: '#editor-template',
        //    extends: Handsontable.vue.BaseEditorComponent,
        //    data: function () {
        //        return {
        //            // We'll need to define properties in our data object,
        //            // corresponding to all of the data being injected from
        //            // the BaseEditorComponent class, which are:
        //            // - hotInstance (instance of Handsontable)
        //            // - row (row index)
        //            // - col (column index)
        //            // - prop (column property name)
        //            // - TD (the HTML cell element)
        //            // - originalValue (cell value passed to the editor)
        //            // - cellProperties (the cellProperties object for the edited cell)
        //            hotInstance: null,
        //            TD: null,
        //            row: null,
        //            col: null,
        //            prop: null,
        //            originalValue: null,
        //            value: '',
        //            cellProperties: null,
        //            isVisible: false,
        //            style: {
        //                position: 'absolute',
        //                padding: '15px',
        //                background: '#fff',
        //                zIndex: 999,
        //                border: '1px solid #000'
        //            }
        //        }
        //    },
        //    methods: {
        //        stopMousedownPropagation: function (e) {
        //            e.stopPropagation();
        //        },
        //        prepare: function (row, col, prop, td, originalValue, cellProperties) {
        //            // We'll need to call the `prepare` method from
        //            // the `BaseEditorComponent` class, as it provides
        //            // the component with the information needed to use the editor
        //            // (hotInstance, row, col, prop, TD, originalValue, cellProperties)
        //            Handsontable.vue.BaseEditorComponent.options.methods.prepare.call(this, row, col, prop, td, originalValue, cellProperties);

        //            //if (!document.body.contains(this.$el)) {
        //            //    document.body.appendChild(this.$el);
        //            //}

        //            $(this.$root).append(this.$el);


        //            //console.log(this);

        //            //const tdPosition = td.getBoundingClientRect();

        //            ////// As the `prepare` method is triggered after selecting
        //            ////// any cell, we're updating the styles for the editor element,
        //            ////// so it shows up in the correct position.
        //            //this.style.left = tdPosition.left + window.pageXOffset + 'px';
        //            //this.style.top = tdPosition.top + window.pageYOffset + 'px';
        //        },
        //        setLowerCase: function () {
        //            this.setValue(this.value.toLowerCase());
        //            this.finishEditing();
        //        },
        //        setUpperCase: function () {
        //            this.setValue(this.value.toUpperCase());
        //            this.finishEditing();
        //        },
        //        open: function () {
        //            this.isVisible = true;
        //        },
        //        close: function () {
        //            this.isVisible = false;
        //        },
        //        setValue: function (value) {
        //            this.value = value;
        //        },
        //        getValue: function () {
        //            return this.value;
        //        }
        //    }
        //};

        const CustomRenderer = {
            template: '<div class="text-danger">{{value}}</div>',
            data: function () {
                return {
                    // We'll need to define properties in our data object,
                    // corresponding to all of the data being injected from
                    // the BaseEditorComponent class, which are:
                    // - hotInstance (instance of Handsontable)
                    // - row (row index)
                    // - col (column index)
                    // - prop (column property name)
                    // - TD (the HTML cell element)
                    // - cellProperties (the cellProperties object for the edited cell)
                    hotInstance: null,
                    TD: null,
                    row: null,
                    col: null,
                    prop: null,
                    value: null,
                    cellProperties: null
                }
            },
            watch: {
                value: function (nv, ov) {
                    console.log("value", nv, this.cellProperties);
                }
            }
        };

        class CustomEditor extends Handsontable.editors.TextEditor {
            constructor(props) {
                super(props);
            }
            createElements() {
                super.createElements();
                this.TEXTAREA = document.createElement('input');
                //this.TEXTAREA.setAttribute('placeholder', 'Custom placeholder');
                this.TEXTAREA.setAttribute('class', 'cus-hot-input');
                this.TEXTAREA.setAttribute('data-hot-input', true);
                this.textareaStyle = this.TEXTAREA.style;
                Handsontable.dom.empty(this.TEXTAREA_PARENT);
                this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
            }
        }

        $(document).bind('keyup change', '.cus-hot-input', function (event) {

            app.isSuspense = true;
            if ($(event.target).val().trim() != '')
                app.inputFormula = $(event.target).val();
        });
    </script>

    <script>
        var app = new Vue({
            el: '#app',
            data: {
                message: 'Hansontable!',
                hotRef: null,
                //hotData: Handsontable.helper.createSpreadsheetData(10, 10),
                //hotDataCellData: [],
                hotSettings: {
                    startRows: 15,
                    startCols: 15,
                    rowHeaders: true,
                    colHeaders: true,
                    contextMenu: true,
                    dropdownMenu: true,
                    formulas: true,
                    mergeCells: true,
                    //colWidths: 100,
                    width: '100%',
                    height: 420,
                    //rowHeights: 23,
                    outsideClickDeselects: false,
                    manualColumnResize: true,
                    manualRowResize: true,
                    manualColumnMove: true,
                    manualRowMove: true,
                    stretchH: 'all',
                    editor: CustomEditor,
                    //columns: [
                    //    {
                    //        type: 'autocomplete',
                    //        source: ['Audi', 'BMW', 'Chrysler', 'Citroen', 'Mercedes', 'Nissan', 'Opel', 'Suzuki', 'Toyota', 'Volvo'],
                    //        strict: false
                    //    },
                    //    {
                    //        // 2nd cell is simple text, no special options here
                    //        editor: CustomEditor
                    //    },
                    //    {
                    //        type: 'date',
                    //        dateFormat: 'MM/DD/YYYY',
                    //        correctFormat: true,
                    //        defaultDate: new Date(),
                    //        // datePicker additional options (see https://github.com/dbushell/Pikaday#configuration)
                    //        datePickerConfig: {
                    //            // First day of the week (0: Sunday, 1: Monday, etc)
                    //            firstDay: 0,
                    //            showWeekNumber: true,
                    //            //numberOfMonths: 3,
                    //            disableDayFn: function (date) {
                    //                // Disable Sunday and Saturday
                    //                return date.getDay() === 0 || date.getDay() === 6;
                    //            }
                    //        }
                    //    },
                    //    {
                    //        type: 'numeric',
                    //        numericFormat: {
                    //            pattern: '$ 0,0.00'
                    //        }
                    //    }
                    //],
                    contextMenu: {
                        callback: function (key, selection, clickEvent) {
                            // Common callback for all options
                            //console.log(key, selection, clickEvent);
                        },
                        items: {
                            'cut': {
                                name: 'Cut'
                            },
                            'copy': {
                                name: 'Copy'
                            },
                            'separator_0': Handsontable.plugins.ContextMenu.SEPARATOR,
                            'row_above': {
                                name: 'Insert row'
                            },
                            'col_left': {
                                name: 'Insert column'
                            },
                            'separator_1': Handsontable.plugins.ContextMenu.SEPARATOR,
                            'remove_row': {
                                name: 'Delete row'
                            },
                            'remove_col': {
                                name: 'Delete column'
                            },
                            'separator_2': Handsontable.plugins.ContextMenu.SEPARATOR,
                            'data_validation': {
                                name: 'Data validation',
                                callback: function () {
                                    app.showModal = true;
                                    let letter = (65 + app.activeCell.col) > 90 ? String.fromCharCode(65 + app.activeCell.col / 65) + String.fromCharCode(65 + app.activeCell.col - 26) : String.fromCharCode(65 + app.activeCell.col);
                                    app.cellRange = letter + (app.activeCell.row + 1);
                                    let cellMeta = app.hotRef.getCellMeta(app.activeCell.row, app.activeCell.col);
                                    app.cellCriteriaValue = cellMeta.type;
                                }
                            },
                        }
                    },
                    licenseKey: 'non-commercial-and-evaluation',
                    //afterChange: () => {
                    //    if (this.hotRef) {
                    //        this.$store.commit('updateData', this.hotRef.getSourceData());
                    //    }
                    //}
                },
                hotCell: [
                    //{ row: 0, col: 0, className: "htCenter htMiddle" },
                ],
                inputFormula: '',
                activeCell: {
                    row: 0, col: 0
                },
                dragEl: null,
                variables: [
                    { id: 1, tag: '!A' },
                    { id: 2, tag: '!B' },
                    { id: 3, tag: '!C' },
                    { id: 4, tag: '!D' },
                ],
                isFormTab: true,
                isEditorOpen: false,
                isSuspense: false,
                showModal: false,
                cellRange: '',
                cellCriteriaValue: 'text',
                cellCriterias: [
                    { value: 'text', text: 'text' },
                    { value: 'date', text: 'date' },
                    { value: 'numeric', text: 'numeric' },
                ],
                parser: null
            },
            mounted() {
                this.initHotForm();

                this.initDragula();
                this.initParser();
            },
            methods: {
                initHotForm() {
                    this.hotRef = this.$refs.wrapper.hotInstance;
                    //Handsontable.hooks.add('afterSetCellMeta', this.afterSetCellMeta, this.hotEl);
                    Handsontable.hooks.add('afterBeginEditing', this.afterBeginEditing, this.hotRef);
                    ////Handsontable.hooks.add('afterChange', this.afterChange, this.hotRef);
                    Handsontable.hooks.add('afterSelection', this.afterSelection, this.hotRef);
                    Handsontable.hooks.add('afterSetDataAtCell', this.afterSetDataAtCell, this.hotRef);

                    this.hotRef.selectCell(this.activeCell.row, this.activeCell.col);
                },
                initDragula() {
                    this.dragEl = dragula([document.querySelector('#variables')]).on('drag', function (el) {
                        //alert('drag!');
                    }).on('drop', function (el) {
                        //console.log('drop', el);
                        //$(el).remove();
                    });
                },
                initParser() {
                    const self = this;
                    this.parser = new formulaParser.Parser();

                    this.parser.on('callRangeValue', function (startCellCoord, endCellCoord, done) {
                        var data = self.hotRef.getSourceData();
                        console.log(data);
                        var fragment = [];

                        for (var row = startCellCoord.row.index; row <= endCellCoord.row.index; row++) {
                            var rowData = data[row];
                            var colFragment = [];

                            for (var col = startCellCoord.column.index; col <= endCellCoord.column.index; col++) {
                                colFragment.push(rowData[col]);
                            }
                            fragment.push(colFragment);
                        }

                        if (fragment) {
                            done(fragment);
                        }
                    });

                    this.parser.on('callCellValue', function (cellCoord, done) {
                        done({ row: cellCoord.row.index, col: cellCoord.column.index });
                    });

                    //console.log(this.parser.parse('A1'));
                    //console.log(this.parser.parse('A:A'));
                },
                afterSetCellMeta(row, col, key, val) {
                    //console.log("cell meta changed", row, col, key, val);
                },
                afterSelection(row, col, row2, col2, selectionLayerLevel) {
                    this.activeCell.row = row;
                    this.activeCell.col = col;
                    //console.log(`afterSelection -> row: ${this.activeCell.row}, col: ${this.activeCell.col} `);
                    this.inputFormula = this.hotRef.getSourceDataAtCell(row, col);
                    this.isEditorOpen = true;
                },
                afterChange(changes, source) {
                    // [[row, prop, oldVal, newVal], ...]
                    //console.log("afterChange", changes, source);
                    //for (let change of changes) {
                    //    if (change[0] == this.activeCell.row && change[1] == this.activeCell.col) {
                    //        //this.inputFormula = change[3];
                    //    }
                    //}
                    //this.activeCell.row = row;
                    //this.activeCell.col = col;
                    ////this.inputFormula = this.hotEl.getDataAtCell(row, col);
                    //this.inputFormula = this.hotEl.getValue();
                },
                afterBeginEditing(row, col) {
                    //console.log("afterBeginEditing", row, col);
                    this.activeCell.row = row;
                    this.activeCell.col = col;
                    //console.log(`afterBeginEditing -> row: ${this.activeCell.row}, col: ${this.activeCell.col} `);
                    this.inputFormula = this.hotRef.getSourceDataAtCell(row, col);
                    this.isEditorOpen = true;
                },
                inputFormulaEnter(event) {
                    //console.log(event);
                    $(event.target).blur();
                    this.isEditorOpen = false;
                    this.isSuspense = false;
                    //console.log(`inputFormulaEnter -> row: ${this.activeCell.row}, col: ${this.activeCell.col} `);
                    this.hotRef.setDataAtCell(this.activeCell.row, this.activeCell.col, this.inputFormula, 'user input enter!');

                    // if move select down
                    this.hotRef.selectCell(++this.activeCell.row, this.activeCell.col);

                    this.$nextTick(function () {
                        this.inputFormula = '';
                    });
                },
                afterSetDataAtCell(changes, source) {
                    //console.log('afterSetDataAtCell', changes);
                },
                changeTab(tab) {
                    if (tab == 'form') {
                        this.hotRef.selectCell(this.activeCell.row, this.activeCell.col);
                    } else if (tab == 'cell-data') {
                        const self = this;
                        this.hotDataCellData = Object.assign([], this.hotData);
                        this.hotRef.selectCell(this.activeCell.row, this.activeCell.col);
                        this.isFormTab = false;
                    }
                },
                getDatas() {
                    console.log(this.hotRef.getSourceData());
                },
                setCellType() {
                    this.showModal = false;
                    //this.cellRange;
                    let coord = this.parser.parse(this.cellRange).result;
                    console.log(coord);
                    this.hotRef.removeCellMeta(coord.row, coord.col, 'valid');
                    this.hotRef.setCellMeta(coord.row, coord.col, 'type', this.cellCriteriaValue);
                    this.hotRef.render();
                },
                removeCellType() {
                    this.showModal = false;
                    let coord = this.parser.parse(this.cellRange).result;
                    this.hotRef.removeCellMeta(coord.row, coord.col, 'type');
                    this.hotRef.removeCellMeta(coord.row, coord.col, 'valid');
                    this.hotRef.render();
                }
            },
            watch: {
                inputFormula: function (nv, ov) {
                    if (nv == '' || this.hotRef.isEmptyRow(this.activeCell.row) || this.hotRef.isEmptyCol(this.activeCell.col) || this.isSuspense) {
                        this.isEditorOpen = false;
                        return;
                    }
                    //console.log(`inputFormula -> row: ${this.activeCell.row}, col: ${this.activeCell.col} `);
                    this.hotRef.setDataAtCell(this.activeCell.row, this.activeCell.col, nv, 'user input');
                }
            },
            components: {
                HotTable: Handsontable.vue.HotTable,
                HotColumn: Handsontable.vue.HotColumn,
                //CustomRenderer,
                //CustomEditor
            },
        })
    </script>
}